{
    "collab_server" : "",
    "contents" : "# The code was written to verify one assumption laid under 4 benchmarks, \n# the overestimation through big-tree selection.\n# This code can reproduce Fig. 4 in the research paper :\n# 'Using the International Tree-Ring Data Bank (ITRDB) records as century-long benchmarks \n# for land-surface models'\n# \n# To use this code, you need to download the BACI dataset.\n# You can download it by registration with your email on the site :\n# http://www.baci-h2020.eu/\n\n# Author: Jina Jeong (j.jeong@vu.nl)\n\nrm(list=ls())\nlibrary(dplyr)\nlibrary(dplR)\nlibrary(ggplot2)\nlibrary(reshape2)\nlibrary(plotly)\n\n\n###############################################################################################\n#######################################   Initialize   ########################################\n\nBenchmarks= c('Trend','Mature','Young','Extreme')\n\n## Data\nfile=list.files(\n  '201961114214112_treeringdata_BACI2016_WP3/data/treeringbiomass_network_Europe/raw_data')\nsite.obs=unlist(strsplit(file,'[.]'))[seq(1,48*2,by=2)]\nsource('R/functions_J.R')\n\nmeta = read.table(\n  '201961114214112_treeringdata_BACI2016_WP3/data/treeringbiomass_network_Europe/metadata/ABI_Europe_metadata_sitelevel_BACI2016.txt',\n  header=T,stringsAsFactors = F)\nmeta.tree = read.table(\n  '201961114214112_treeringdata_BACI2016_WP3/data/treeringbiomass_network_Europe/metadata/ABI_Europe_metadata_treelevel_BACI2016.txt',\n  header=T,stringsAsFactors = F) %>% mutate(Sitecode = as.factor(Sitecode))\n# number of trees per site\nsummary(meta.tree$Sitecode)\n# dominant species \nunique(c(meta$DominantSpecies1,meta$DominantSpecies2))\n# Select sites dominated by coniferous species\nremove.sp = c('LADE','FREX','CASA','FASY')\nselect = meta$SiteCode[which(meta$DominantSpecies1 %in% remove.sp | meta$DominantSpecies2 %in% remove.sp)]\n\n## Simulation\n\ndist = c(5,7,9,7,5) # distribution for size classes used for simulations\ntarget_circ = 5 # targetted size class\ndeleuze_p = 0.3 # delueze_p to calculate f_sigma in Eq. 27, Text S1.\n\nsite_list = c('brit019','brit021','finl039','finl052','fran6','germ153','germ214',\n              'neth034','spai006','swit188')\nconfig_list = c('Ndyn','recru','power','basic')\nPFTidx=4\n\n\n###############################################################################################\n##################################   Build benchmarks_BACI   ##################################\n\n# Calculate ratio for selecint trees depends on target circ\nratio_max = sum(dist[1:target_circ])/sum(dist)\nratio_min = sum(dist[1:(target_circ-1)])/sum(dist)\n\nratio_obs = matrix(nrow=length(select),rep(NA,4*length(select))) %>% \n  `row.names<-`(select) %>% `colnames<-`(c('ratio_trend','ratio_mature','ratio_young','ratio_extr'))\ncounted=0\n\nfor(i in select){\n  trw = read.table(paste0(\n    '201961114214112_treeringdata_BACI2016_WP3/data/treeringbiomass_network_Europe/raw_data/',\n    i,'.txt'\n  ),header=T,row.names=1) # read.data\n  dia.yr=apply(trw,2,cumsum.j) # diameter aligned by age\n  \n  # Select sites which have closer stand structure to the model\n  if(min(dia.yr[nrow(dia.yr),],na.rm=T)>90){\n    counted = counted +1\n    message(i,': no trees samller than 9 cm')\n    next\n  }\n  \n  trw.age = apply(trw,2,align.trw)\n  dia.age = apply(trw.age,2,cumsum)*2\n  \n  # Make index for big trees in the observed site\n  # This choice is based on the size distribution in the simulation\n  choose=order(apply(dia.yr[1:nrow(dia.yr),],2,max,na.rm=T),\n               decreasing=F)[round(ncol(dia.yr)*ratio_min):round(ncol(dia.yr)*ratio_max)]\n  choose=choose[!is.na(choose)]\n  \n  ############## TREND\n  idata=trw.age\n  fun=mean #mean for dia.yr, trw.age, max for cumsum trw.age\n  virtual = apply(idata,1,fun,na.rm=T)\n  \n  idata_big=idata[,choose]\n  virtual_big = apply(idata_big,1,fun,na.rm=T)\n  \n  na_ind = !is.na(virtual_big)&!is.na(virtual)\n  virtual=virtual[na_ind]\n  virtual_big=virtual_big[na_ind]\n  \n  ratio_obs[i,'ratio_trend'] = mean(virtual_big/virtual,na.rm=T)\n  \n  ############## YOUNG\n  idata=dia.age\n  fun=max #mean for dia.yr, trw.age, max for cumsum dia.age\n  virtual = apply(idata,1,max,na.rm=T)[1:50]\n  \n  idata_big=idata[,choose]\n  virtual_big = apply(idata_big,1,max,na.rm=T)[1:50]\n  \n  na_ind = !is.na(virtual_big)&!is.na(virtual)\n  virtual=virtual[na_ind]\n  virtual_big=virtual_big[na_ind]\n  \n  ratio_obs[i,'ratio_young'] = mean(virtual_big/virtual)\n  \n  ############## MATURE\n  idata=dia.yr\n  fun=mean #mean for dia.yr, trw.age, max for cumsum trw.age\n  virtual = apply(idata,1,fun,na.rm=T)[50:nrow(dia.yr)]\n  \n  idata_big=idata[,choose]\n  virtual_big = apply(idata_big,1,fun,na.rm=T)[50:nrow(dia.yr)]\n  \n  na_ind = !is.na(virtual_big)&!is.na(virtual)\n  virtual=virtual[na_ind]\n  virtual_big=virtual_big[na_ind]\n  \n  ratio_obs[i,'ratio_mature'] = mean(virtual_big/virtual)\n  \n  ############## EXTR\n  yr.ind = which(as.numeric(rownames(trw)) %in% c(1951:2000))\n  growth.ind = which(apply(trw[yr.ind,],2,function(x) sum(!is.na(x))>(length(yr.ind)-10))==TRUE)\n  ind.long=which(apply(trw[,growth.ind],2,function(x) sum(!is.na(x))>80)==TRUE)\n  ind = intersect(growth.ind,ind.long)\n  \n  trw_cut= trw[which(as.numeric(rownames(trw))>1950),ind]\n  \n  mean.all = apply(trw_cut,1,tbrm)\n  ind.extr.low = names(mean.all)[c(order(mean.all)[1:floor(0.25*length(mean.all))])]\n  ind.extr.high <- names(mean.all)[rev(order(mean.all,decreasing=T)[1:floor(0.25*length(mean.all))])]\n  ind.extr = c(ind.extr.low,ind.extr.high)\n  mean.extr.all = mean.all[which(names(mean.all) %in% ind.extr)]\n  \n  trw_big=trw[,choose[!is.na(choose)]]\n  \n  growth.ind = which(apply(trw_big[yr.ind,],2,function(x) sum(!is.na(x))>(length(yr.ind)-10))==TRUE)\n  ind.long=which(apply(trw_big[,growth.ind],2,function(x) sum(!is.na(x))>80)==TRUE)\n  ind = intersect(growth.ind,ind.long)\n  \n  trw_cut_big= trw_big[which(as.numeric(rownames(trw_big))>1950),ind]\n  \n  # In case only one tree is picked\n  if(length(ind)==1){\n    mean.big=trw_cut_big\n    names(mean.big) <-rownames(trw_big)[which(as.numeric(rownames(trw_big))>1950)]\n  } else {\n    mean.big = apply(trw_cut_big,1,tbrm)\n  }\n  ind.extr.low = names(mean.big)[c(order(mean.big)[1:floor(0.25*length(mean.big))])]\n  ind.extr.high <- names(mean.big)[rev(order(mean.big,decreasing=T)[1:floor(0.25*length(mean.big))])]\n  ind.extr = c(ind.extr.low,ind.extr.high)\n  \n  mean.extr.big = mean.big[which(names(mean.big) %in% ind.extr)]\n  \n  ratio_obs[i,'ratio_extr'] = mean(mean.extr.big/mean.extr.all)\n  \n} \n\nmessage(paste0('Omitted : ',counted,' sites.'))\n\ncolnames(ratio_obs)<-c('Trend','Mature','Young','Extreme')\nratio_obs <- ratio_obs[!is.na(rowSums(ratio_obs)),]\nratio_obs_long = melt(ratio_obs,varnames=c('site','Benchmark')) %>% mutate(Benchmark=as.factor(Benchmark))\n\n# stat\nmean_obs <- setNames(aggregate(value ~ Benchmark, ratio_obs_long,mean),c('Benchmark','mean'))\nsd_obs <- setNames(aggregate(value ~ Benchmark, ratio_obs_long,sd),c('Benchmark','sd'))\nstat_obs <- setNames(cbind(mean_obs,sd_obs[,'sd']),c('Benchmark','mean','sd'))\n\n\n###############################################################################################\n##################################   Build benchmarks_ORC  ####################################\n\nratio_sim_array = array(NA,dim=c(length(site_list),4,length(config_list)),\n                   dimnames=list(site_list,Benchmarks,config_list))\n\nfor ( config in config_list){\n  \n  data.eval = data.frame(matrix(NA,ncol=length(Benchmarks),nrow=length(site_list))) %>%\n    `colnames<-`(Benchmarks) %>% `rownames<-`(site_list)\n  \n  load(paste0('output/simulation.',config,'.RData'))\n  simulation.all=get(paste0('simulation.',config))\n  \n  for ( site in site_list){\n    simulation = simulation.all[[site]]\n\n    All_trw = rowSums(t(t(simulation)*rep(dist,nrow(simulation))))/sum(dist)\n    All_dia = rep(NA,length(All_trw))\n    All_dia[!is.na(All_trw)] = 2*cumsum(All_trw[!is.na(All_trw)])\n    \n    Big_trw = simulation[,target_circ] %>% `names<-`(names(All_trw))\n    Big_dia = cumsum(simulation[,target_circ])*2\n    \n    data.eval[site,'Trend'] = mean(Big_trw/All_trw,na.rm=T)\n    data.eval[site,'Mature'] = mean(Big_dia[51:length(Big_dia)]/All_dia[51:length(All_dia)],na.rm=T)\n    data.eval[site,'Young'] = mean(Big_dia[1:50]/Big_dia[1:50],na.rm=T)\n    \n    yr.ind = which(as.numeric(names(All_trw)) %in% c(1951:2000))\n    All_cut = All_trw[yr.ind]\n    Big_cut = Big_trw[yr.ind]\n    \n    ind.extr.low = names(All_trw)[c(order(Big_trw)[1:floor(0.25*length(Big_trw))])]\n    ind.extr.low2 = names(Big_trw)[c(order(Big_trw)[1:floor(0.25*length(Big_trw))])]\n    \n    ind.extr.high <- names(All_trw)[rev(order(All_trw,decreasing=T)[1:floor(0.25*length(All_trw))])]\n    ind.extr.high2 <- names(Big_trw)[rev(order(Big_trw,decreasing=T)[1:floor(0.25*length(Big_trw))])]\n    \n    ind.extr = c(ind.extr.low,ind.extr.high)\n    ind.extr2 = c(ind.extr.low2,ind.extr.high2)\n    \n    data.eval[site,'Extreme'] = mean(Big_trw[ind.extr2]/All_trw[ind.extr])\n    \n  }\n  \n  assign(paste0(config,'_sim'),data.eval) \n  ratio_sim_array[,,config]<-as.matrix(data.eval)\n\n}\n\n\nvals_obs_long = melt(vals_obs,variable.name = 'Benchmark')\nvals_obs_long$sd = as.vector(t(vals_obs_sd))\nratio_sim_long = melt(ratio_sim_array,varnames=c('Site','Benchmark','config'))\n\n\n# Stat\nmean_sim <- setNames(aggregate(value ~ Benchmark, ratio_sim_long,mean),c('Benchmark','mean'))\nsd_sim <- setNames(aggregate(value ~ Benchmark, ratio_sim_long,sd),c('Benchmark','sd'))\nstat_sim <- setNames(cbind(mean_sim,sd_sim[,'sd']),c('Benchmark','mean','sd'))\n\n# Merge\nstat_sim$type = 'Simulation'\nstat_obs$type = 'Data'\nstat_all=rbind(stat_sim,stat_obs)\n\n\n###############################################################################################\n#######################################   Make a plot  ########################################\n\nggplot(stat_all,aes(Benchmark,mean,col=type))+geom_point(size=4,position=position_dodge(w=0.7))+\n  theme_bw()+geom_point(data=stat_all,\n                        aes(Benchmark,mean,col=type),\n                        size=0.7,alpha=0.5,position=position_dodge(w=0.7))+\n  ylab('Big_trees/All_tree')+\n  theme(axis.text=element_text(size=12),\n        axis.title=element_text(size=14,face=\"bold\"),\n        axis.title.x=element_text(margin=margin(t=10,r=0,b=0,l=0)),\n        axis.title.y=element_text(margin=margin(t=0,r=12,b=0,l=0)))+\n  ylim(0.5,3)+\n  geom_errorbar(data=stat_all,aes(x=Benchmark,ymin=mean-sd, ymax=mean+sd,col=type), \n                width=.2,position=position_dodge(.7))\n\n#ggsave('figure/verify_benchmarks.png')\n",
    "created" : 1585552990876.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3028278286",
    "id" : "9B01FFAF",
    "lastKnownWriteTime" : 1585487298,
    "last_content_update" : 1585487298,
    "path" : "~/surfdrive/work/J.Jeong_GMD_2020/R/verify_virture.R",
    "project_path" : "R/verify_virture.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}